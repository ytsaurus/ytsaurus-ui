export type YTApiIdType = YTApiId | `customApi${string}`;

export const enum YTApiId {
    // Names of ids for node-controllers should be started with 'ui_'-prefix
    ui_clusterInfo = 'ui_clusterInfo',
    ui_loadColumnPreset = 'ui_loadColumnPreset',

    favoritesAccountsAttributes = 'favoritesAccountsAttributes',

    // Some ids without specific page
    clusterParams = 'clusterParams',
    clusterParamsIsDeveloper = 'clusterParamsIsDeveloper',

    usableAccounts = 'usableAccounts',
    checkPermissions = 'checkPermissions',
    getPoolTree = 'getPoolTree',
    getPoolTrees = 'getPoolTrees',
    getPoolDefaultPoolTreeName = 'getPoolDefaultPoolTreeName',
    getPoolTreesPath = 'getPoolTreesPath',
    listPoolNames = 'listPoolNames',
    getUsableBundles = 'getUsableBundles',
    listAccounts = 'listAccounts',
    listBundles = 'listBundles',
    listGroups = 'listGroups',
    listUsableAccounts = 'listUsableAccounts',
    listUsers = 'listUsers',
    listUsersUM = 'listUsersUM',
    listPoolsTrees = 'listPoolsTrees',
    listPools = 'listPools',
    openAttributesModal = 'openAttributesModal',
    pathEditorLoadSuggestions = 'pathEditorLoadSuggestions',
    updateAttributes = 'updateAttributes',
    updateNodeAttributes = 'updateNodeAttributes',

    // Page-specific requests
    accountsData = 'accountsData',
    accountsEditData = 'accountsEditData',

    attributesEditorGetAttrs = 'attributesEditorGetAttrs',
    attributesEditorMerge = 'attributesEditorMerge',
    attributesEditorSet = 'attributesEditorSet',

    componentsClusterNodes = 'componentsClusterNodes',
    componentGetRpcProxies = 'componentGetRpcProxies',
    componentsRpcProxies = 'componentsRpcProxies',
    componentsShards = 'componentsShards',
    componentsUpdateNodeData = 'componentsUpdateNodeData',

    groupsData = 'groupsData',
    groupsEditData = 'groupsEditData',
    groupsListAll = 'groupsListAll',

    // dynamic tables
    dynTableCheckPerm = 'dynTableCheckPerm',
    dynTableSelectRows = 'dynTableSelectRows',
    dynTableSelectRowsPreload = 'dynTableSelectRowsPreload',

    // static tables
    tableReadPreload = 'tableReadPreload',
    tableRead = 'tableRead',

    navigationAttributes = 'navigationAttributes',
    navigationCheckPermissions = 'navigationCheckPermissions',
    navigationCopy = 'navigationCopy',
    navigationDelete = 'navigationDelete',
    navigationDynTableState = 'navigationDynTableState',
    navigationGetAnnotation = 'navigationGetAnnotation',
    navigationGetDocument = 'navigationGetDocument',
    navigationSaveDocument = 'navigationSaveDocument',
    navigationGetPath = 'navigationGetPath',
    navigationGetType = 'navigationGetType',
    navigationGetPathInfo = 'navigationGetPathInfo',
    navigationGetTabletState = 'navigationGetTabletState',
    navigationIsStaticTable = 'navigationIsStaticTable',
    navigationListNodes = 'navigationListNodes',
    navigationListTransactions = 'navigationListTransactions',
    navigationLocks = 'navigationLocks',
    navigationTransactions = 'navigationTransactions',
    navigationMove = 'navigationMove',
    navigationMoveToTrash = 'navigationMoveToTrash',
    navigationMoveToTrashRestorePath = 'navigationMoveToTrashRestorePath',
    navigationResourceUsage = 'navigationResourceUsage',
    navigationRestorePath = 'navigationRestorePath',
    navigationRTReplicas = 'navigationRTReplicas',
    navigationTableSortLoadColumns = 'navigationTableSortLoadColumns',
    navigationTabletErrors = 'navigationTabletErrors',
    navigationTabletErrorsCountDynTable = 'navigationTabletErrorsCountDynTable',
    navigationTabletErrorsCountReplicatedTable = 'navigationTabletErrorsCountReplicatedTable',
    navigationTableMountConfig = 'navigationTableMountConfig',
    navigationTypeDynamic = 'navigationTypeDynamic',
    navigationUpdateView = 'navigationUpdateView',
    navigationUserAttributes = 'navigationUserAttributes',

    nodeAttributes = 'nodeAttributes',
    nodeMemoryUsage = 'nodeMemoryUsage',
    nodeUnrecognizedOptions = 'nodeUnrecognizedOptions',

    schedulingData = 'schedulingData',
    schedulingEditPool = 'schedulingEditPool',

    listOperations = 'listOperations',

    operationGetJobs = 'operationGetJobs',
    operationIntermediateResourceUsage = 'operationIntermediateResourceUsage',
    operationIsEphemeral = 'operationIsEphemeral',
    operationsSchedulerInstances = 'operationsSchedulerInstances',
    operationTreeConfigs = 'operationTreeConfigs',
    listJobs100 = 'listJobs100',
    jobsOperationIncarnations = 'jobsOperationIncarnations',
    listOperationEvents = 'listOperationEvents',

    resourcePlannerPoolDetails = 'resourcePlannerPoolDetails',

    schedulingGetAttrsBeforeEdit = 'schedulingGetAttrsBeforeEdit',
    schedulingLoadOperations = 'schedulingLoadOperations',
    schedulingLoadOperationsPerPool = 'schedulingLoadOperationsPerPool',
    schedulingLoadTree = 'schedulingLoadTree',
    schedulingTransferPoolQuota = 'schedulingTransferPoolQuota',
    schedulingPoolFullPath = 'schedulingPoolFullPath',
    schedulingLoadPoolsAll = 'schedulingLoadPoolsAll',
    schedulingLoadPoolsPerPool = 'schedulingLoadPoolsPerPool',
    schedulingLoadChildrenPerPool = 'schedulingLoadChildrenPerPool',
    schedulingLoadCypressDataPerPool = 'schedulingLoadCypressDataPerPool',
    schedulingFilterAttributes = 'schedulingFilterAttributes',

    systemCAInstances = 'systemCAInstances',
    systemCAStates = 'systemCAStates',
    systemChunks = 'systemChunks',
    systemMasters = 'systemMasters',
    systemMastersConfig = 'systemMastersConfig',
    systemMastersConfigDiscoveryServer = 'systemMastersConfigDiscoveryServer',
    systemMastersMaintenance = 'systemMastersMaintenance',
    systemNodes = 'systemNodes',
    systemProxies = 'systemProxies',
    systemResources = 'systemResources',
    systemRpcProxies = 'systemRpcProxies',
    systemSchedulers = 'systemSchedulers',
    systemSchedulersState = 'systemSchedulersState',

    tabletAttribute = 'tabletAttribute',
    tabletCellAttributes = 'tabletCellAttributes',
    tabletPartitions = 'tabletPartitions',
    tabletStores = 'tabletStores',
    tabletStoresByIds = 'tabletStoresByIds',
    tabletTableAttributes = 'tabletTableAttributes',

    tabletCellBundles = 'tabletCellBundles',
    tabletCellBundlesEditData = 'tabletCellBundlesEditData',
    tabletCellBundlesInstancesDetails = 'tabletCellBundlesInstancesDetails',
    tabletCellBundlesSetAttrs = 'tabletCellBundlesSetAttrs',
    tabletCellBundlesWithAbc = 'tabletCellBundlesWithAbc',

    chaosCellBundles = 'chaosCellBundles',
    chaosCellBundlesEditData = 'chaosCellBundlesEditData',
    chaosCellBundlesSetAttrs = 'chaosCellBundlesSetAttrs',

    usersData = 'usersData',
    usersEditData = 'usersEditData',
    usersSaveData = 'usersSaveData',

    bundleControllerZones = 'bundleControllerZones',
    tabletBundleControllerState = 'tabletBundleControllerState',
    tabletBundlesCheckWrite = 'tabletBundlesCheckWrite',
    listQueries = 'listQueries',
    getQuery = 'getQuery',
    startQuery = 'startQuery',
    abortQuery = 'abortQuery',
    readQueryResults = 'readQueryResults',
    getQueryResults = 'getQueryResults',
    alterQuery = 'alterQuery',

    addMaintenance = 'addMaintenance',
    removeMaintenance = 'removeMaintenance',
    maintenanceRequests = 'maintenanceRequests',
    getQueryTrackerInfo = 'getQueryTrackerInfo',
    switchLeader = 'switchLeader',
    listUserTokens = 'listUserTokens',
    revokeToken = 'revokeToken',
    issueToken = 'issueToken',

    setUserPassword = 'setUserPassword',

    // queues
    queueExportConfig = 'queueExportConfig',
    queueStatus = 'queueStatus',
    queuePartitions = 'queuePartitions',
    queueConsumerStatus = 'queueConsumerStatus',
    queueConsumerPartitions = 'queueConsumerPartitions',

    //dashboard
    poolsInfo = 'poolsInfo',
    listDashboardOperations = 'listDashboardOperations',
    poolsDashboard = 'poolsDashboard',
    navigationDashboard = 'navigationDashboard',
    operationsDashboard = 'operationsDashboard',
    queriesDashboard = 'queriesDashboard',
    servicesDashboard = 'servicesDashboard',
    accountsDashboard = 'accountsDashboard',

    //pipeline/flow
    flowExecuteDescribePipeline = 'flowExecuteDescribePipeline',
}
